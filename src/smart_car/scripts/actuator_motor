#!/usr/bin/env python
import rospy
from smart_car.Raspi_MotorHAT import Raspi_MotorHAT, Raspi_DCMotor
from sensor_msgs.msg import Joy
from geometry_msgs.msg import Twist

import time
import atexit

class motor_controller:
    def __init__(self):
        rospy.init_node('motor_controller')
        rospy.Subscriber('joy', Joy, self.updateVelocity)

        self.mh = Raspi_MotorHAT(addr=0x6f)
        self.motor1 = self.mh.getMotor(1)
        self.motor2 = self.mh.getMotor(2)
        self.motor3 = self.mh.getMotor(3)
        self.motor4 = self.mh.getMotor(4)

        atexit.register(self.turnOffMotors)
        
        self.setSpeed(150)
        self.moveForward()
        self.turnOffMotors()
        
    def moveForward(self):
        self.motor1.run(Raspi_MotorHAT.FORWARD)
        self.motor2.run(Raspi_MotorHAT.FORWARD)
        self.motor3.run(Raspi_MotorHAT.FORWARD)
        self.motor4.run(Raspi_MotorHAT.FORWARD)

    def setSpeed(self, speed):
        self.motor1.setSpeed(speed)
        self.motor2.setSpeed(speed)
        self.motor3.setSpeed(speed)
        self.motor4.setSpeed(speed)

    def turnOffMotors(self):
        self.motor1.run(Raspi_MotorHAT.RELEASE)
        self.motor2.run(Raspi_MotorHAT.RELEASE)
        self.motor3.run(Raspi_MotorHAT.RELEASE)
        self.motor4.run(Raspi_MotorHAT.RELEASE)

    def updateVelocity(self, data):
        twist = Twist()
        twist.linear.x = 4 * data.axes[1]
        twist.angular.z = 4 * data.axes[0]
        rospy.logwarn(data)





if __name__ == '__main__':
    try:
        motor_controller()
    except rospy.ROSInterruptException:
        pass